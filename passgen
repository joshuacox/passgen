#!/bin/bash
# Generate a password and immediately copy it to all clipboards by default


# Define what it means to be a long pass
LONG=63

# Our result store
RESULT=initialized

# regex to test if integer
re='^[0-9]+$'
if [[ $1 =~ $re ]] ; then
  PASS_LENGTH=$1
else
  PASS_LENGTH=11
fi

# Check if a command exists
check_cmd () {
  if ! type "$1" > /dev/null; then
    echo "$1 was not found in your path!"
    echo "To proceed please install $1 to your path and try again!"
    exit 1
  fi
}

horizontal_rule () {
  #rulez=( '!' '@' '\#' '-' '>' '<' '.' '_' '^' '*' '%' )
  rulez=( '-' )
  selected_rule=${rulez[$RANDOM % ${#rulez[@]} ]}
  if [[ -z $selected_rule ]]; then
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
  else
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "$selected_rule"
  fi
}

# Main
main() {
  local FIRST_ARG=$1
  check_cmd uuidgen
  check_cmd date
  check_cmd sha256sum
  check_cmd sha384sum
  check_cmd sha512sum
  check_cmd md5sum
  check_cmd shuf
  check_cmd gpg
  check_cmd pwgen
  check_cmd openssl

	if [[ "$FIRST_ARG" == '-h' || "$FIRST_ARG" == '--help'  ]]; then
		usage
		exit 1
	elif [[ "$FIRST_ARG" == '-l' || "$FIRST_ARG" == '--long'  ]]; then
    longshots
		exit 1
	elif [[ "$FIRST_ARG" == '-a' || "$FIRST_ARG" == '--all' || "$FIRST_ARG" == '-v'  ]]; then
    obedient
    disobedient
    longshots
		exit 1
	elif [[ "$FIRST_ARG" == '-o' || "$FIRST_ARG" == '--obedient'  ]]; then
    obedient
		exit 1
	elif [[ "$FIRST_ARG" == '-t' || "$FIRST_ARG" == '--test'  ]]; then
    tests
		exit 1
	fi

	if [[ "$FIRST_ARG" == '-u' || "$FIRST_ARG" == '--unsafe'  ]]; then
    if [[ $2 =~ $re ]] ; then
      PASS_LENGTH=$2
    else
      PASS_LENGTH=11
    fi
    unsafe
  else
    shuffy
	fi

  clippy

}

# Help
usage() {
	echo -e "Passgen - The CLI Password Generator"
	echo "Usage:"
	echo -e "passgen\t\t-      by default will generate a password with lots of chars
 use a pretty good random and copy to your clipboard, primary and
secondary.i.e. ctrl-shift-v, shift-insert, and middle click all ought to
work in linux and print you out a decent password."
	echo -e "passgen -o\t- generate obedient passwords"
	echo -e "passgen -a\t- generate all passwords"
	echo -e "passgen -l\t- generate long hash passwords"
	echo -e "passgen 12\t- generate 12 character passwords"
}

# Main block of random generators these all obey PASS_LENGTH
obedient() {
  apg -a 1 -n20 -m ${PASS_LENGTH}  -x ${PASS_LENGTH}
}

clippy () {
  echo -n $RESULT | xclip -i  -selection clipboard
  echo -n $RESULT | xclip -i  -selection primary
  echo -n $RESULT | xclip -i  -selection secondary
  echo $RESULT
}

shuffy () {
  # Determine which method of creating a random password we'll use
  SHUFFY=$(shuf -i 1-21 -n1 --random-source=/dev/random)
  case "$SHUFFY" in
  "1")
      RESULT=$(first_rand)
      ;;
  "2")
      RESULT=$(second_rand)
      ;;
  "3")
      RESULT=$(third_rand)
      ;;
  "4")
      RESULT=$(fourth_rand)
      ;;
  "5")
      RESULT=$(fifth_rand)
      ;;
  "6")
      RESULT=$(sixth_rand)
      ;;
  "7")
      RESULT=$(seventh_rand)
      ;;
  "8")
      RESULT=$(eighth_rand)
      ;;
  "9")
      RESULT=$(nineth_rand)
      ;;
  "10")
      RESULT=$(tenth_rand)
      ;;
  "11")
      RESULT=$(eleventh_rand)
      ;;
  "12")
      RESULT=$(twelfth_rand)
      ;;
  "13")
      RESULT=$(thirteenth_rand)
      ;;
  "14")
      RESULT=$(fourteenth_rand)
      ;;
  "15")
      RESULT=$(fifteenth_rand)
      ;;
  "16")
      RESULT=$(sixteenth_rand)
      ;;
  "17")
      RESULT=$(seventeenth_rand)
      ;;
  "18")
      RESULT=$(eighteenth_rand)
      ;;
  "19")
      RESULT=$(nineteenth_rand)
      ;;
  *)
      RESULT=$(twentieth_rand)
      ;;
  esac
}

first_rand()
{
  cat /dev/urandom | tr -dc a-zA-Z0-9 | head -c${PASS_LENGTH}; echo
}

second_rand()
{
  apg -a 0 -n1 -m ${PASS_LENGTH}  -x ${PASS_LENGTH}
}

third_rand()
{
  apg -a 1 -n1 -m ${PASS_LENGTH}  -x ${PASS_LENGTH}

}

fourth_rand()
{
  local HEADSTOP=$(( 400 + $RANDOM % 50 + 1 ))
  local GENBLOCK=$(( 500 + $RANDOM % 50 + 1 ))
  echo $(gpg --gen-random 1 ${GENBLOCK}|base64|head -c${HEADSTOP}|tail -c${PASS_LENGTH})
}

fifth_rand()
{
  pwgen --secure ${PASS_LENGTH} 1
}

sixth_rand()
{
  pwgen --secure ${PASS_LENGTH} 1
}

seventh_rand()
{
  echo $(< /dev/random tr -dc _A-Z-a-z-0-9 | head -c${PASS_LENGTH})
}

eighth_rand()
{
  echo $(< /dev/random tr -dc _A-Z-a-z-0-9 | head -c${1:-${PASS_LENGTH}})
}

nineth_rand()
{
  echo $(< /dev/random tr -dc '12345!@#$%qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM' | head -c${PASS_LENGTH})
}

tenth_rand()
{
  echo $(strings /dev/random | grep -o '[[:alnum:]]' | head -n ${PASS_LENGTH} | tr -d '\n')
}

eleventh_rand()
{
  echo $(tr -cd '[:alnum:]' < /dev/urandom | fold -w${PASS_LENGTH} | head -n1)
}

twelfth_rand()
{
  cat /dev/urandom | tr -dc a-zA-Z0-9 | fold -w ${PASS_LENGTH} | head -n 1
}

thirteenth_rand()
{
  pwgen ${PASS_LENGTH} 1
}

fourteenth_rand()
{
  pwgen --secure --numerals ${PASS_LENGTH} 1
}

fifteenth_rand()
{
  pwgen --secure --no-vowels ${PASS_LENGTH} 1
}

sixteenth_rand()
{
  pwgen --secure --ambiguous ${PASS_LENGTH} 1
}

seventeenth_rand()
{
  pwgen --secure --symbols ${PASS_LENGTH} 1
}

eighteenth_rand()
{
  pwgen --secure --no-capitalize ${PASS_LENGTH} 1
}

nineteenth_rand()
{
  pwgen --secure --capitalize ${PASS_LENGTH} 1
}

twentieth_rand()
{
  pwgen --secure ${PASS_LENGTH} 1
}

# openssl
openssl_base64_rand () {
  openssl rand -base64 ${PASS_LENGTH}
}

# These disobey the PASS_LENGTH
disobedient() {
  apg -a 0 -n20
}
longshots() {
  if [[ ${COLUMNS:-$(tput cols)} < 250 ]]; then
    apg -a 1 -n20 -m ${COLUMNS:-$(tput cols)}  -x ${COLUMNS:-$(tput cols)}
  else
    apg -a 1 -n20 -m 249 -x 249
  fi
  apg -n10 -x 50
  apg -n10 -l -x 10
  apg -n10 -y -x 25
  apg -n10 -t -x 25
}

tests() {
  echo first_rand 
  first_rand
  horizontal_rule
  echo second_rand 
  second_rand
  horizontal_rule
  echo third_rand 
  third_rand
  horizontal_rule
  echo fourth_rand 
  fourth_rand
  horizontal_rule
  echo fifth_rand 
  fifth_rand
  horizontal_rule
  echo sixth_rand 
  sixth_rand
  horizontal_rule
  echo seventh_rand 
  seventh_rand
  horizontal_rule
  echo eighth_rand 
  eighth_rand
  horizontal_rule
  echo nineth_rand 
  nineth_rand
  horizontal_rule
  echo tenth_rand 
  tenth_rand
  horizontal_rule
  echo eleventh_rand 
  eleventh_rand
  horizontal_rule
  echo twelfth_rand 
  twelfth_rand
  horizontal_rule
  echo thirteenth_rand 
  thirteenth_rand
  horizontal_rule
  echo fourteenth_rand 
  fourteenth_rand
  horizontal_rule
  echo fifteenth_rand 
  fifteenth_rand
  horizontal_rule
  echo sixteenth_rand 
  sixteenth_rand
  horizontal_rule
  echo seventeenth_rand 
  seventeenth_rand
  horizontal_rule
  echo eighteenth_rand 
  eighteenth_rand
  horizontal_rule
  echo nineteenth_rand 
  nineteenth_rand
  horizontal_rule
  echo twentieth_rand 
  twentieth_rand
}

main "$@"
